# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:09:23+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AssigneeMode(Enum):
    ASSIGNEE_MODE_UNSPECIFIED = 'ASSIGNEE_MODE_UNSPECIFIED'
    ALL_STUDENTS = 'ALL_STUDENTS'
    INDIVIDUAL_STUDENTS = 'INDIVIDUAL_STUDENTS'


class State(Enum):
    ANNOUNCEMENT_STATE_UNSPECIFIED = 'ANNOUNCEMENT_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class CloudPubsubTopic(BaseModel):
    topicName: Optional[str] = Field(
        None,
        description='The `name` field of a Cloud Pub/Sub [Topic](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).',
    )


class CourseState(Enum):
    COURSE_STATE_UNSPECIFIED = 'COURSE_STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    PROVISIONED = 'PROVISIONED'
    DECLINED = 'DECLINED'
    SUSPENDED = 'SUSPENDED'


class CourseAlias(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='Alias string. The format of the string indicates the desired alias scoping. * `d:` indicates a domain-scoped alias. Example: `d:math_101` * `p:` indicates a project-scoped alias. Example: `p:abc123` This field has a maximum length of 256 characters.',
    )


class CourseRosterChangesInfo(BaseModel):
    courseId: Optional[str] = Field(
        None,
        description='The `course_id` of the course to subscribe to roster changes for.',
    )


class State1(Enum):
    COURSE_WORK_STATE_UNSPECIFIED = 'COURSE_WORK_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class SubmissionModificationMode(Enum):
    SUBMISSION_MODIFICATION_MODE_UNSPECIFIED = (
        'SUBMISSION_MODIFICATION_MODE_UNSPECIFIED'
    )
    MODIFIABLE_UNTIL_TURNED_IN = 'MODIFIABLE_UNTIL_TURNED_IN'
    MODIFIABLE = 'MODIFIABLE'


class WorkType(Enum):
    COURSE_WORK_TYPE_UNSPECIFIED = 'COURSE_WORK_TYPE_UNSPECIFIED'
    ASSIGNMENT = 'ASSIGNMENT'
    SHORT_ANSWER_QUESTION = 'SHORT_ANSWER_QUESTION'
    MULTIPLE_CHOICE_QUESTION = 'MULTIPLE_CHOICE_QUESTION'


class CourseWorkChangesInfo(BaseModel):
    courseId: Optional[str] = Field(
        None,
        description='The `course_id` of the course to subscribe to work changes for.',
    )


class State2(Enum):
    COURSEWORK_MATERIAL_STATE_UNSPECIFIED = 'COURSEWORK_MATERIAL_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class Date(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class DriveFile(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='URL that can be used to access the Drive item. Read-only.'
    )
    id: Optional[str] = Field(None, description='Drive API resource ID.')
    thumbnailUrl: Optional[str] = Field(
        None, description='URL of a thumbnail image of the Drive item. Read-only.'
    )
    title: Optional[str] = Field(
        None, description='Title of the Drive item. Read-only.'
    )


class DriveFolder(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='URL that can be used to access the Drive folder. Read-only.'
    )
    id: Optional[str] = Field(None, description='Drive API resource ID.')
    title: Optional[str] = Field(
        None, description='Title of the Drive folder. Read-only.'
    )


class Empty(BaseModel):
    pass


class FeedType(Enum):
    FEED_TYPE_UNSPECIFIED = 'FEED_TYPE_UNSPECIFIED'
    DOMAIN_ROSTER_CHANGES = 'DOMAIN_ROSTER_CHANGES'
    COURSE_ROSTER_CHANGES = 'COURSE_ROSTER_CHANGES'
    COURSE_WORK_CHANGES = 'COURSE_WORK_CHANGES'


class Feed(BaseModel):
    courseRosterChangesInfo: Optional[CourseRosterChangesInfo] = Field(
        None,
        description='Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`. This field must be specified if `feed_type` is `COURSE_ROSTER_CHANGES`.',
    )
    courseWorkChangesInfo: Optional[CourseWorkChangesInfo] = Field(
        None,
        description='Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`. This field must be specified if `feed_type` is `COURSE_WORK_CHANGES`.',
    )
    feedType: Optional[FeedType] = Field(None, description='The type of feed.')


class Form(BaseModel):
    formUrl: Optional[str] = Field(None, description='URL of the form.')
    responseUrl: Optional[str] = Field(
        None,
        description='URL of the form responses document. Only set if responses have been recorded and only when the requesting user is an editor of the form. Read-only.',
    )
    thumbnailUrl: Optional[str] = Field(
        None, description='URL of a thumbnail image of the Form. Read-only.'
    )
    title: Optional[str] = Field(None, description='Title of the Form. Read-only.')


class Permission(Enum):
    PERMISSION_UNSPECIFIED = 'PERMISSION_UNSPECIFIED'
    CREATE_COURSE = 'CREATE_COURSE'


class GlobalPermission(BaseModel):
    permission: Optional[Permission] = Field(None, description='Permission value.')


class GradeCategory(BaseModel):
    defaultGradeDenominator: Optional[int] = Field(
        None,
        description='Default value of denominator. Only applicable when grade calculation type is TOTAL_POINTS.',
    )
    id: Optional[str] = Field(None, description='ID of the grade category.')
    name: Optional[str] = Field(None, description='Name of the grade category.')
    weight: Optional[int] = Field(
        None,
        description='The weight of the category average as part of overall average. A weight of 12.34% is represented as 123400 (100% is 1,000,000). The last two digits should always be zero since we use two decimal precision. Only applicable when grade calculation type is WEIGHTED_CATEGORIES.',
    )


class GradeChangeType(Enum):
    UNKNOWN_GRADE_CHANGE_TYPE = 'UNKNOWN_GRADE_CHANGE_TYPE'
    DRAFT_GRADE_POINTS_EARNED_CHANGE = 'DRAFT_GRADE_POINTS_EARNED_CHANGE'
    ASSIGNED_GRADE_POINTS_EARNED_CHANGE = 'ASSIGNED_GRADE_POINTS_EARNED_CHANGE'
    MAX_POINTS_CHANGE = 'MAX_POINTS_CHANGE'


class GradeHistory(BaseModel):
    actorUserId: Optional[str] = Field(
        None, description='The teacher who made the grade change.'
    )
    gradeChangeType: Optional[GradeChangeType] = Field(
        None,
        description='The type of grade change at this time in the submission grade history.',
    )
    gradeTimestamp: Optional[str] = Field(
        None, description='When the grade of the submission was changed.'
    )
    maxPoints: Optional[float] = Field(
        None,
        description='The denominator of the grade at this time in the submission grade history.',
    )
    pointsEarned: Optional[float] = Field(
        None,
        description='The numerator of the grade at this time in the submission grade history.',
    )


class CalculationType(Enum):
    CALCULATION_TYPE_UNSPECIFIED = 'CALCULATION_TYPE_UNSPECIFIED'
    TOTAL_POINTS = 'TOTAL_POINTS'
    WEIGHTED_CATEGORIES = 'WEIGHTED_CATEGORIES'


class DisplaySetting(Enum):
    DISPLAY_SETTING_UNSPECIFIED = 'DISPLAY_SETTING_UNSPECIFIED'
    SHOW_OVERALL_GRADE = 'SHOW_OVERALL_GRADE'
    HIDE_OVERALL_GRADE = 'HIDE_OVERALL_GRADE'
    SHOW_TEACHERS_ONLY = 'SHOW_TEACHERS_ONLY'


class GradebookSettings(BaseModel):
    calculationType: Optional[CalculationType] = Field(
        None, description='Indicates how the overall grade is calculated.'
    )
    displaySetting: Optional[DisplaySetting] = Field(
        None, description='Indicates who can see the overall grade..'
    )
    gradeCategories: Optional[List[GradeCategory]] = Field(
        None,
        description='Grade categories that are available for coursework in the course.',
    )


class State3(Enum):
    GUARDIAN_INVITATION_STATE_UNSPECIFIED = 'GUARDIAN_INVITATION_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'


class GuardianInvitation(BaseModel):
    creationTime: Optional[str] = Field(
        None, description='The time that this invitation was created. Read-only.'
    )
    invitationId: Optional[str] = Field(
        None, description='Unique identifier for this invitation. Read-only.'
    )
    invitedEmailAddress: Optional[str] = Field(
        None,
        description='Email address that the invitation was sent to. This field is only visible to domain administrators.',
    )
    state: Optional[State3] = Field(
        None, description='The state that this invitation is in.'
    )
    studentId: Optional[str] = Field(
        None, description='ID of the student (in standard format)'
    )


class IndividualStudentsOptions(BaseModel):
    studentIds: Optional[List[str]] = Field(
        None,
        description='Identifiers for the students that have access to the coursework/announcement.',
    )


class Role(Enum):
    COURSE_ROLE_UNSPECIFIED = 'COURSE_ROLE_UNSPECIFIED'
    STUDENT = 'STUDENT'
    TEACHER = 'TEACHER'
    OWNER = 'OWNER'


class Invitation(BaseModel):
    courseId: Optional[str] = Field(
        None, description='Identifier of the course to invite the user to.'
    )
    id: Optional[str] = Field(
        None, description='Identifier assigned by Classroom. Read-only.'
    )
    role: Optional[Role] = Field(
        None,
        description='Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.',
    )
    userId: Optional[str] = Field(
        None,
        description='Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user',
    )


class Link(BaseModel):
    thumbnailUrl: Optional[str] = Field(
        None, description='URL of a thumbnail image of the target URL. Read-only.'
    )
    title: Optional[str] = Field(
        None, description='Title of the target of the URL. Read-only.'
    )
    url: Optional[str] = Field(
        None,
        description='URL to link to. This must be a valid UTF-8 string containing between 1 and 2024 characters.',
    )


class ListCourseAliasesResponse(BaseModel):
    aliases: Optional[List[CourseAlias]] = Field(
        None, description='The course aliases.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListGuardianInvitationsResponse(BaseModel):
    guardianInvitations: Optional[List[GuardianInvitation]] = Field(
        None, description='Guardian invitations that matched the list request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListInvitationsResponse(BaseModel):
    invitations: Optional[List[Invitation]] = Field(
        None, description='Invitations that match the list request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ModifyIndividualStudentsOptions(BaseModel):
    addStudentIds: Optional[List[str]] = Field(
        None,
        description='IDs of students to be added as having access to this coursework/announcement.',
    )
    removeStudentIds: Optional[List[str]] = Field(
        None,
        description='IDs of students to be removed from having access to this coursework/announcement.',
    )


class MultipleChoiceQuestion(BaseModel):
    choices: Optional[List[str]] = Field(None, description='Possible choices.')


class MultipleChoiceSubmission(BaseModel):
    answer: Optional[str] = Field(None, description="Student's select choice.")


class Name(BaseModel):
    familyName: Optional[str] = Field(
        None, description="The user's last name. Read-only."
    )
    fullName: Optional[str] = Field(
        None,
        description="The user's full name formed by concatenating the first and last name values. Read-only.",
    )
    givenName: Optional[str] = Field(
        None, description="The user's first name. Read-only."
    )


class ReclaimStudentSubmissionRequest(BaseModel):
    pass


class Registration(BaseModel):
    cloudPubsubTopic: Optional[CloudPubsubTopic] = Field(
        None,
        description='The Cloud Pub/Sub topic that notifications are to be sent to.',
    )
    expiryTime: Optional[str] = Field(
        None,
        description='The time until which the `Registration` is effective. This is a read-only field assigned by the server.',
    )
    feed: Optional[Feed] = Field(
        None,
        description='Specification for the class of notifications that Classroom should deliver to the destination.',
    )
    registrationId: Optional[str] = Field(
        None,
        description='A server-generated unique identifier for this `Registration`. Read-only.',
    )


class ReturnStudentSubmissionRequest(BaseModel):
    pass


class ShareMode(Enum):
    UNKNOWN_SHARE_MODE = 'UNKNOWN_SHARE_MODE'
    VIEW = 'VIEW'
    EDIT = 'EDIT'
    STUDENT_COPY = 'STUDENT_COPY'


class SharedDriveFile(BaseModel):
    driveFile: Optional[DriveFile] = Field(None, description='Drive file details.')
    shareMode: Optional[ShareMode] = Field(
        None, description='Mechanism by which students access the Drive item.'
    )


class ShortAnswerSubmission(BaseModel):
    answer: Optional[str] = Field(
        None, description='Student response to a short-answer question.'
    )


class State4(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATED = 'CREATED'
    TURNED_IN = 'TURNED_IN'
    RETURNED = 'RETURNED'
    RECLAIMED_BY_STUDENT = 'RECLAIMED_BY_STUDENT'
    STUDENT_EDITED_AFTER_TURN_IN = 'STUDENT_EDITED_AFTER_TURN_IN'


class StateHistory(BaseModel):
    actorUserId: Optional[str] = Field(
        None, description='The teacher or student who made the change.'
    )
    state: Optional[State4] = Field(None, description='The workflow pipeline stage.')
    stateTimestamp: Optional[str] = Field(
        None, description='When the submission entered this state.'
    )


class CourseWorkType(Enum):
    COURSE_WORK_TYPE_UNSPECIFIED = 'COURSE_WORK_TYPE_UNSPECIFIED'
    ASSIGNMENT = 'ASSIGNMENT'
    SHORT_ANSWER_QUESTION = 'SHORT_ANSWER_QUESTION'
    MULTIPLE_CHOICE_QUESTION = 'MULTIPLE_CHOICE_QUESTION'


class State5(Enum):
    SUBMISSION_STATE_UNSPECIFIED = 'SUBMISSION_STATE_UNSPECIFIED'
    NEW = 'NEW'
    CREATED = 'CREATED'
    TURNED_IN = 'TURNED_IN'
    RETURNED = 'RETURNED'
    RECLAIMED_BY_STUDENT = 'RECLAIMED_BY_STUDENT'


class SubmissionHistory(BaseModel):
    gradeHistory: Optional[GradeHistory] = Field(
        None, description='The grade history information of the submission, if present.'
    )
    stateHistory: Optional[StateHistory] = Field(
        None, description='The state history information of the submission, if present.'
    )


class TimeOfDay(BaseModel):
    hours: Optional[int] = Field(
        None,
        description='Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        None, description='Minutes of hour of day. Must be from 0 to 59.'
    )
    nanos: Optional[int] = Field(
        None,
        description='Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.',
    )
    seconds: Optional[int] = Field(
        None,
        description='Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.',
    )


class Topic(BaseModel):
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.',
    )
    topicId: Optional[str] = Field(
        None, description='Unique identifier for the topic. Read-only.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='The time the topic was last updated by the system. Read-only.',
    )


class TurnInStudentSubmissionRequest(BaseModel):
    pass


class UserProfile(BaseModel):
    emailAddress: Optional[str] = Field(
        None,
        description='Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.',
    )
    id: Optional[str] = Field(None, description='Identifier of the user. Read-only.')
    name: Optional[Name] = Field(None, description='Name of the user. Read-only.')
    permissions: Optional[List[GlobalPermission]] = Field(
        None, description='Global permissions of the user. Read-only.'
    )
    photoUrl: Optional[str] = Field(
        None,
        description="URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.",
    )
    verifiedTeacher: Optional[bool] = Field(
        None,
        description="Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only",
    )


class YouTubeVideo(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='URL that can be used to view the YouTube video. Read-only.'
    )
    id: Optional[str] = Field(None, description='YouTube API resource ID.')
    thumbnailUrl: Optional[str] = Field(
        None, description='URL of a thumbnail image of the YouTube video. Read-only.'
    )
    title: Optional[str] = Field(
        None, description='Title of the YouTube video. Read-only.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CourseStates(RootModel[List[CourseState]]):
    root: List[CourseState]


class AnnouncementState(Enum):
    ANNOUNCEMENT_STATE_UNSPECIFIED = 'ANNOUNCEMENT_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class AnnouncementStates(RootModel[List[AnnouncementState]]):
    root: List[AnnouncementState]


class CourseWorkState(Enum):
    COURSE_WORK_STATE_UNSPECIFIED = 'COURSE_WORK_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class CourseWorkStates(RootModel[List[CourseWorkState]]):
    root: List[CourseWorkState]


class Late(Enum):
    LATE_VALUES_UNSPECIFIED = 'LATE_VALUES_UNSPECIFIED'
    LATE_ONLY = 'LATE_ONLY'
    NOT_LATE_ONLY = 'NOT_LATE_ONLY'


class States(RootModel[List[State5]]):
    root: List[State5]


class CourseWorkMaterialState(Enum):
    COURSEWORK_MATERIAL_STATE_UNSPECIFIED = 'COURSEWORK_MATERIAL_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'


class CourseWorkMaterialStates(RootModel[List[CourseWorkMaterialState]]):
    root: List[CourseWorkMaterialState]


class State8(Enum):
    GUARDIAN_INVITATION_STATE_UNSPECIFIED = 'GUARDIAN_INVITATION_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'


class States1(RootModel[List[State8]]):
    root: List[State8]


class Assignment(BaseModel):
    studentWorkFolder: Optional[DriveFolder] = Field(
        None,
        description='Drive folder where attachments from student submissions are placed. This is only populated for course teachers and administrators.',
    )


class Attachment(BaseModel):
    driveFile: Optional[DriveFile] = Field(
        None, description='Google Drive file attachment.'
    )
    form: Optional[Form] = Field(None, description='Google Forms attachment.')
    link: Optional[Link] = Field(None, description='Link attachment.')
    youTubeVideo: Optional[YouTubeVideo] = Field(
        None, description='Youtube video attachment.'
    )


class CourseMaterial(BaseModel):
    driveFile: Optional[DriveFile] = Field(
        None, description='Google Drive file attachment.'
    )
    form: Optional[Form] = Field(None, description='Google Forms attachment.')
    link: Optional[Link] = Field(None, description='Link atatchment.')
    youTubeVideo: Optional[YouTubeVideo] = Field(
        None, description='Youtube video attachment.'
    )


class CourseMaterialSet(BaseModel):
    materials: Optional[List[CourseMaterial]] = Field(
        None, description='Materials attached to this set.'
    )
    title: Optional[str] = Field(None, description='Title for this set.')


class Guardian(BaseModel):
    guardianId: Optional[str] = Field(None, description='Identifier for the guardian.')
    guardianProfile: Optional[UserProfile] = Field(
        None, description='User profile for the guardian.'
    )
    invitedEmailAddress: Optional[str] = Field(
        None,
        description='The email address to which the initial guardian invitation was sent. This field is only visible to domain administrators.',
    )
    studentId: Optional[str] = Field(
        None,
        description='Identifier for the student to whom the guardian relationship applies.',
    )


class ListGuardiansResponse(BaseModel):
    guardians: Optional[List[Guardian]] = Field(
        None,
        description='Guardians on this page of results that met the criteria specified in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListTopicResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )
    topic: Optional[List[Topic]] = Field(
        None, description='Topic items that match the request.'
    )


class Material(BaseModel):
    driveFile: Optional[SharedDriveFile] = Field(
        None, description='Google Drive file material.'
    )
    form: Optional[Form] = Field(None, description='Google Forms material.')
    link: Optional[Link] = Field(
        None,
        description='Link material. On creation, this is upgraded to a more appropriate type if possible, and this is reflected in the response.',
    )
    youtubeVideo: Optional[YouTubeVideo] = Field(
        None, description='YouTube video material.'
    )


class ModifyAnnouncementAssigneesRequest(BaseModel):
    assigneeMode: Optional[AssigneeMode] = Field(
        None,
        description='Mode of the announcement describing whether it is accessible by all students or specified individual students.',
    )
    modifyIndividualStudentsOptions: Optional[ModifyIndividualStudentsOptions] = Field(
        None,
        description='Set which students can view or cannot view the announcement. Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.',
    )


class ModifyAttachmentsRequest(BaseModel):
    addAttachments: Optional[List[Attachment]] = Field(
        None,
        description='Attachments to add. A student submission may not have more than 20 attachments. Form attachments are not supported.',
    )


class ModifyCourseWorkAssigneesRequest(BaseModel):
    assigneeMode: Optional[AssigneeMode] = Field(
        None,
        description='Mode of the coursework describing whether it will be assigned to all students or specified individual students.',
    )
    modifyIndividualStudentsOptions: Optional[ModifyIndividualStudentsOptions] = Field(
        None,
        description='Set which students are assigned or not assigned to the coursework. Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.',
    )


class Student(BaseModel):
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    profile: Optional[UserProfile] = Field(
        None, description='Global user information for the student. Read-only.'
    )
    studentWorkFolder: Optional[DriveFolder] = Field(
        None,
        description="Information about a Drive Folder for this student's work in this course. Only visible to the student and domain administrators. Read-only.",
    )
    userId: Optional[str] = Field(
        None,
        description='Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user',
    )


class Teacher(BaseModel):
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    profile: Optional[UserProfile] = Field(
        None, description='Global user information for the teacher. Read-only.'
    )
    userId: Optional[str] = Field(
        None,
        description='Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user',
    )


class Announcement(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.',
    )
    assigneeMode: Optional[AssigneeMode] = Field(
        None,
        description='Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.',
    )
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    creationTime: Optional[str] = Field(
        None, description='Timestamp when this announcement was created. Read-only.'
    )
    creatorUserId: Optional[str] = Field(
        None,
        description='Identifier for the user that created the announcement. Read-only.',
    )
    id: Optional[str] = Field(
        None,
        description='Classroom-assigned identifier of this announcement, unique per course. Read-only.',
    )
    individualStudentsOptions: Optional[IndividualStudentsOptions] = Field(
        None,
        description='Identifiers of students with access to the announcement. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field can see the announcement.',
    )
    materials: Optional[List[Material]] = Field(
        None,
        description='Additional materials. Announcements must have no more than 20 material items.',
    )
    scheduledTime: Optional[str] = Field(
        None,
        description='Optional timestamp when this announcement is scheduled to be published.',
    )
    state: Optional[State] = Field(
        None,
        description='Status of this announcement. If unspecified, the default state is `DRAFT`.',
    )
    text: Optional[str] = Field(
        None,
        description='Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Timestamp of the most recent change to this announcement. Read-only.',
    )


class AssignmentSubmission(BaseModel):
    attachments: Optional[List[Attachment]] = Field(
        None,
        description='Attachments added by the student. Drive files that correspond to materials with a share mode of STUDENT_COPY may not exist yet if the student has not accessed the assignment in Classroom. Some attachment metadata is only populated if the requesting user has permission to access it. Identifier and alternate_link fields are always available, but others (for example, title) may not be.',
    )


class Course(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this course in the Classroom web UI. Read-only.',
    )
    calendarId: Optional[str] = Field(
        None,
        description='The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. Read-only.',
    )
    courseGroupEmail: Optional[str] = Field(
        None,
        description='The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.',
    )
    courseMaterialSets: Optional[List[CourseMaterialSet]] = Field(
        None,
        description='Sets of materials that appear on the "about" page of this course. Read-only.',
    )
    courseState: Optional[CourseState] = Field(
        None,
        description='State of the course. If unspecified, the default state is `PROVISIONED`.',
    )
    creationTime: Optional[str] = Field(
        None,
        description='Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional description. For example, "We\'ll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.',
    )
    descriptionHeading: Optional[str] = Field(
        None,
        description='Optional heading for the description. For example, "Welcome to 10th Grade Biology." If set, this field must be a valid UTF-8 string and no longer than 3600 characters.',
    )
    enrollmentCode: Optional[str] = Field(
        None,
        description='Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.',
    )
    gradebookSettings: Optional[GradebookSettings] = Field(
        None,
        description="The gradebook settings that specify how a student's overall grade for the course will be calculated and who it will be displayed to. Read-only",
    )
    guardiansEnabled: Optional[bool] = Field(
        None,
        description='Whether or not guardian notifications are enabled for this course. Read-only.',
    )
    id: Optional[str] = Field(
        None,
        description='Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the course. For example, "10th Grade Biology". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.',
    )
    ownerId: Optional[str] = Field(
        None,
        description='The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.',
    )
    room: Optional[str] = Field(
        None,
        description='Optional room location. For example, "301". If set, this field must be a valid UTF-8 string and no longer than 650 characters.',
    )
    section: Optional[str] = Field(
        None,
        description='Section of the course. For example, "Period 2". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.',
    )
    teacherFolder: Optional[DriveFolder] = Field(
        None,
        description='Information about a Drive Folder that is shared with all teachers of the course. This field will only be set for teachers of the course and domain administrators. Read-only.',
    )
    teacherGroupEmail: Optional[str] = Field(
        None,
        description='The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.',
    )


class CourseWork(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.',
    )
    assigneeMode: Optional[AssigneeMode] = Field(
        None,
        description='Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.',
    )
    assignment: Optional[Assignment] = Field(
        None,
        description='Assignment details. This is populated only when `work_type` is `ASSIGNMENT`. Read-only.',
    )
    associatedWithDeveloper: Optional[bool] = Field(
        None,
        description='Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.',
    )
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    creationTime: Optional[str] = Field(
        None, description='Timestamp when this course work was created. Read-only.'
    )
    creatorUserId: Optional[str] = Field(
        None,
        description='Identifier for the user that created the coursework. Read-only.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.',
    )
    dueDate: Optional[Date] = Field(
        None,
        description='Optional date, in UTC, that submissions for this course work are due. This must be specified if `due_time` is specified.',
    )
    dueTime: Optional[TimeOfDay] = Field(
        None,
        description='Optional time of day, in UTC, that submissions for this course work are due. This must be specified if `due_date` is specified.',
    )
    gradeCategory: Optional[GradeCategory] = Field(
        None,
        description="The category that this coursework's grade contributes to. Present only when a category has been chosen for the coursework. May be used in calculating the overall grade. Read-only.",
    )
    id: Optional[str] = Field(
        None,
        description='Classroom-assigned identifier of this course work, unique per course. Read-only.',
    )
    individualStudentsOptions: Optional[IndividualStudentsOptions] = Field(
        None,
        description='Identifiers of students with access to the coursework. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field are assigned the coursework.',
    )
    materials: Optional[List[Material]] = Field(
        None,
        description='Additional materials. CourseWork must have no more than 20 material items.',
    )
    maxPoints: Optional[float] = Field(
        None,
        description='Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.',
    )
    multipleChoiceQuestion: Optional[MultipleChoiceQuestion] = Field(
        None,
        description='Multiple choice question details. For read operations, this field is populated only when `work_type` is `MULTIPLE_CHOICE_QUESTION`. For write operations, this field must be specified when creating course work with a `work_type` of `MULTIPLE_CHOICE_QUESTION`, and it must not be set otherwise.',
    )
    scheduledTime: Optional[str] = Field(
        None,
        description='Optional timestamp when this course work is scheduled to be published.',
    )
    state: Optional[State1] = Field(
        None,
        description='Status of this course work. If unspecified, the default state is `DRAFT`.',
    )
    submissionModificationMode: Optional[SubmissionModificationMode] = Field(
        None,
        description='Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.',
    )
    title: Optional[str] = Field(
        None,
        description='Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.',
    )
    topicId: Optional[str] = Field(
        None,
        description='Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Timestamp of the most recent change to this course work. Read-only.',
    )
    workType: Optional[WorkType] = Field(
        None,
        description='Type of this course work. The type is set when the course work is created and cannot be changed.',
    )


class CourseWorkMaterial(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this course work material in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.',
    )
    assigneeMode: Optional[AssigneeMode] = Field(
        None,
        description='Assignee mode of the course work material. If unspecified, the default value is `ALL_STUDENTS`.',
    )
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    creationTime: Optional[str] = Field(
        None,
        description='Timestamp when this course work material was created. Read-only.',
    )
    creatorUserId: Optional[str] = Field(
        None,
        description='Identifier for the user that created the course work material. Read-only.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.',
    )
    id: Optional[str] = Field(
        None,
        description='Classroom-assigned identifier of this course work material, unique per course. Read-only.',
    )
    individualStudentsOptions: Optional[IndividualStudentsOptions] = Field(
        None,
        description='Identifiers of students with access to the course work material. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field can see the course work material.',
    )
    materials: Optional[List[Material]] = Field(
        None,
        description='Additional materials. A course work material must have no more than 20 material items.',
    )
    scheduledTime: Optional[str] = Field(
        None,
        description='Optional timestamp when this course work material is scheduled to be published.',
    )
    state: Optional[State2] = Field(
        None,
        description='Status of this course work material. If unspecified, the default state is `DRAFT`.',
    )
    title: Optional[str] = Field(
        None,
        description='Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.',
    )
    topicId: Optional[str] = Field(
        None,
        description='Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Timestamp of the most recent change to this course work material. Read-only.',
    )


class ListAnnouncementsResponse(BaseModel):
    announcements: Optional[List[Announcement]] = Field(
        None, description='Announcement items that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListCourseWorkMaterialResponse(BaseModel):
    courseWorkMaterial: Optional[List[CourseWorkMaterial]] = Field(
        None, description='Course work material items that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListCourseWorkResponse(BaseModel):
    courseWork: Optional[List[CourseWork]] = Field(
        None, description='Course work items that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListCoursesResponse(BaseModel):
    courses: Optional[List[Course]] = Field(
        None, description='Courses that match the list request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )


class ListStudentsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )
    students: Optional[List[Student]] = Field(
        None, description='Students who match the list request.'
    )


class ListTeachersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )
    teachers: Optional[List[Teacher]] = Field(
        None, description='Teachers who match the list request.'
    )


class StudentSubmission(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to the submission in the Classroom web UI. Read-only.',
    )
    assignedGrade: Optional[float] = Field(
        None,
        description='Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.',
    )
    assignmentSubmission: Optional[AssignmentSubmission] = Field(
        None,
        description='Submission content when course_work_type is ASSIGNMENT. Students can modify this content using ModifyAttachments.',
    )
    associatedWithDeveloper: Optional[bool] = Field(
        None,
        description='Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.',
    )
    courseId: Optional[str] = Field(
        None, description='Identifier of the course. Read-only.'
    )
    courseWorkId: Optional[str] = Field(
        None,
        description='Identifier for the course work this corresponds to. Read-only.',
    )
    courseWorkType: Optional[CourseWorkType] = Field(
        None, description='Type of course work this submission is for. Read-only.'
    )
    creationTime: Optional[str] = Field(
        None,
        description='Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.',
    )
    draftGrade: Optional[float] = Field(
        None,
        description='Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.',
    )
    id: Optional[str] = Field(
        None,
        description='Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.',
    )
    late: Optional[bool] = Field(
        None, description='Whether this submission is late. Read-only.'
    )
    multipleChoiceSubmission: Optional[MultipleChoiceSubmission] = Field(
        None,
        description='Submission content when course_work_type is MULTIPLE_CHOICE_QUESTION.',
    )
    shortAnswerSubmission: Optional[ShortAnswerSubmission] = Field(
        None,
        description='Submission content when course_work_type is SHORT_ANSWER_QUESTION.',
    )
    state: Optional[State5] = Field(
        None, description='State of this submission. Read-only.'
    )
    submissionHistory: Optional[List[SubmissionHistory]] = Field(
        None,
        description='The history of the submission (includes state and grade histories). Read-only.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.',
    )
    userId: Optional[str] = Field(
        None,
        description='Identifier for the student that owns this submission. Read-only.',
    )


class ListStudentSubmissionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token identifying the next page of results to return. If empty, no further results are available.',
    )
    studentSubmissions: Optional[List[StudentSubmission]] = Field(
        None, description='Student work that matches the request.'
    )
